#!/bin/sh

# Lucas Oberwager dotfiles install script
# contains code from and inspired by
# https://github.com/twpayne/chezmoi

set -e

LOG_LEVEL=2
GITHUB_DOWNLOAD=https://github.com/Watt3r/dotfiles.git
INSTALL_DIR=~/.dotfiles

usage() {
	this="$1"
	cat <<EOF
${this}: Download Lucas Oberwager's dotfiles

Usage: ${this} [-i installdir] [-l] [-h]
  -i  Set the installation directory (default is ${INSTALL_DIR}).
  -l  Set the log level (default is ${LOG_LEVEL}).
  -h  Show this help message.
EOF
	exit 2
}

check_command() {
    command -v "$1" > /dev/null 2>&1 || { echo >&2 "$1 is required but it's not installed. Aborting."; exit 1; }
}

get_remote_url() {
    git -C "$1" config --get remote.origin.url
}

check_repo() {
  remote_url=$(get_remote_url "$1")
  if [ "$remote_url" == "$GITHUB_DOWNLOAD" ]; then
      log_info "'$1' is a proper dotfiles repo."
  else
      log_info "'$1' is not a proper dotfiles repo."
  fi
}

install_xcode_cli() {
    if [ "$(uname)" = "Darwin" ]; then
        if ! xcode-select --print-path &>/dev/null; then
            echo "Xcode CLI tools not found. Installing them..."
            xcode-select --install
            echo "Please continue with the script after the installation is complete."
            exit 1
        fi
    fi
}

log_info() {
	[ 2 -le "${LOG_LEVEL}" ] || return 0
	echo info "$@" 1>&2
}

log_crit() {
	[ 0 -le "${LOG_LEVEL}" ] || return 0
	echo critical "$@" 1>&2
}

parse_args() {
	while getopts "i:l:h" arg; do
		case "${arg}" in
		i) INSTALL_DIR="${OPTARG}" ;;
                l)
                   case ${OPTARG} in
                     ''|*[!0-9]*) echo "Error: -l requires an integer argument" ; exit 1 ;;
                     *) LOG_LEVEL=${OPTARG} ;;
                   esac
                   ;;
		h | \?) usage "$0" ;;
		*) return 1 ;;
		esac
	done
	shift $((OPTIND - 1))
	EXECARGS="$*"
}

main() {
  parse_args "$@"
  install_xcode_cli
  check_command git

  if [ "$(whoami)" = "root" ]; then
    log_crit "Do not run as root. Install dotfiles for a specific user."
    exit 1
  fi

  if ! mkdir "${INSTALL_DIR}" &>/dev/null; then
    log_info "Directory ${INSTALL_DIR} exists. Checking if proper dotfiles repo."
    if ! check_repo "${INSTALL_DIR}" ; then
      log_crit "Directory ${INSTALL_DIR} exists and is not a proper dotfiles repo. Moving."
      mv -n "${INSTALL_DIR}" "${INSTALL_DIR}-backup"
    elif ! git fetch --dry-run --quiet "${INSTALL_DIR}" &>/dev/null; then
      log_info "Directory ${INSTALL_DIR} exists and is a proper dotfiles repo. Skipping."
      exit 0
    fi
  else
    log_info "Cloning dotfiles repo from ${GITHUB_DOWNLOAD}"
    git clone --recurse-submodules ${GITHUB_DOWNLOAD} ${INSTALL_DIR}
  fi

  (${INSTALL_DIR}/install) || (log_crit "Installation failed" && exit 1)
  log_info "Successfully installed."
}

main "$@"
